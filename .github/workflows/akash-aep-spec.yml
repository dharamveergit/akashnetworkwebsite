name: Update AEP Specs

on:
  schedule:
    - cron: "0 */6 * * *" # Check every 6 hours
  workflow_dispatch:

jobs:
  update-specs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0 # Fetch all history for all branches

      - name: Check for existing PR
        id: check-pr
        run: |
          gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
          PR_EXIST=$(gh pr list --search "Update AEP Specs" --state open --json number --jq 'length')
          echo "pr_exists=$PR_EXIST" >> $GITHUB_OUTPUT
          if [ "$PR_EXIST" -gt "0" ]; then
            PR_INFO=$(gh pr list --search "Update AEP Specs" --state open --json number,headRefName --jq '.[0]')
            PR_NUMBER=$(echo $PR_INFO | jq -r '.number')
            PR_BRANCH=$(echo $PR_INFO | jq -r '.headRefName')
            echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
            echo "pr_branch=$PR_BRANCH" >> $GITHUB_OUTPUT
          fi

      - name: Clone and Update Specs
        id: update-specs
        run: |
          # Store current state of AEP specs
          mkdir -p temp_new_specs

          # Clone only the necessary files
          git clone --depth 1 --filter=blob:none https://github.com/dharamveergit/AEP.git temp_aep

          # Copy specs to temporary location
          cp -r temp_aep/spec/* temp_new_specs/
          rm -rf temp_aep

          # Check if we have actual changes by comparing with current specs
          if [ -d "src/content/aeps" ]; then
            if diff -r src/content/aeps temp_new_specs > /dev/null; then
              echo "has_changes=false" >> $GITHUB_OUTPUT
            else
              echo "has_changes=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Update Existing PR
        if: steps.update-specs.outputs.has_changes == 'true' && steps.check-pr.outputs.pr_exists != '0'
        run: |
          # Configure git
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'

          # Clean working directory
          git clean -fd
          git reset --hard

          # Fetch and checkout PR branch
          git fetch origin ${{ steps.check-pr.outputs.pr_branch }}
          git checkout -B ${{ steps.check-pr.outputs.pr_branch }} origin/${{ steps.check-pr.outputs.pr_branch }}

          # Remove old specs and copy new ones
          rm -rf src/content/aeps
          mkdir -p src/content/aeps
          cp -r temp_new_specs/* src/content/aeps/

          # Commit and push changes
          git add src/content/aeps
          git commit -m "chore: update AEP specs [skip ci]"
          git push -f origin ${{ steps.check-pr.outputs.pr_branch }}

          echo "Updated existing PR #${{ steps.check-pr.outputs.pr_number }}"

      - name: Create New PR
        if: steps.update-specs.outputs.has_changes == 'true' && steps.check-pr.outputs.pr_exists == '0'
        run: |
          # Configure git
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'

          # Clean working directory
          git clean -fd
          git reset --hard

          # Create a new branch with timestamp
          branch_name="update-aep-specs-$(date +%Y%m%d-%H%M%S)"
          git checkout -b $branch_name

          # Remove old specs and copy new ones
          rm -rf src/content/aeps
          mkdir -p src/content/aeps
          cp -r temp_new_specs/* src/content/aeps/

          # Commit changes
          git add src/content/aeps
          git commit -m "chore: update AEP specs"
          git push origin $branch_name

          # Create PR using GitHub CLI
          gh pr create \
            --title "Update AEP Specs $(date +%Y-%m-%d)" \
            --body "Automated PR to update AEP specifications" \
            --base pr-to-main-aep \
            --head $branch_name

      - name: Trigger Build
        if: success()
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: spec-update
